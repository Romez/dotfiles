call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'terryma/vim-multiple-cursors'
Plug 'embear/vim-localvimrc'
Plug 'nanotech/jellybeans.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'digitaltoad/vim-pug'
Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'editorconfig/editorconfig-vim'
Plug 'janko-m/vim-test'
Plug 'vim-airline/vim-airline'
Plug 'ervandew/supertab'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'tpope/vim-fugitive'
Plug 'wlangstroth/vim-racket'
Plug 'mattn/emmet-vim'
" Plug 'tpope/vim-repeat'
" Plug 'ntpeters/vim-better-whitespace'
" Plug 'tpope/vim-sensible'
" Plug 'mhinz/vim-signify'
" Plug 'heavenshell/vim-jsdoc'
" Plug 'glench/vim-jinja2-syntax'
" Plug 'kien/rainbow_parentheses.vim'
" Plug 'ap/vim-css-color'
" Plug 'tpope/vim-fireplace'
" Plug 'slim-template/vim-slim'
" Plug 'craigemery/vim-autotag'
" Plug 'styled-components/vim-styled-components'
call plug#end()

let mapleader = "\<Space>"
nmap <silent> // :nohlsearch<CR>
nmap <silent> <leader>b :Buffer<CR>

" Don't redraw while executing macros (good performance config)
" set lazyredraw
" set ttyfast

set hidden
set number
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2
set shiftwidth=2
set splitbelow
set cmdheight=2
set scrolloff=3
set autoindent
set foldmethod=syntax
set foldlevelstart=20
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

silent! colorscheme jellybeans

" resize window
nnoremap <silent> <Leader>= :exe "resize +10"<CR>
nnoremap <silent> <Leader>- :exe "resize -10"<CR>
nnoremap <silent> <Leader>0 :exe "vertical resize +10"<CR>
nnoremap <silent> <Leader>9 :exe "vertical resize -10"<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" https://github.com/vim/vim/blob/master/runtime/doc/russian.txt
" Enable hotkeys for Russian layout
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

" Turn off linewise keys. Normally, the `j' and `k' keys move the cursor down one entire line. with line wrapping on, this can cause the cursor to actually skip a few lines on the screen because it's moving from line N to line N+1 in the file. I want this to act more visually -- I want `down' to mean the next line on the screen
nmap j gj
nmap k gk

vmap <leader>y :w! /tmp/.vbuf<CR>
nmap <leader>y :.w! /tmp/.vbuf<CR>
nmap <leader>p :r /tmp/.vbuf<CR>

" enable coc-highlights css color
set termguicolors

" jsdoc
" let g:jsdoc_enable_es6 = 1

" coc
nmap <silent> rn <Plug>(coc-rename)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> <leader><leader> :CocCommand explorer<CR>

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
" nmap <silent> FJ <Plug>(coc-float-jump)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" format the entire file
command! -nargs=0 Prettier :CocCommand prettier.formatFile
vmap ff <Plug>(coc-format-selected)
nmap ff <Plug>(coc-format-selected)

" nerdtree
" nmap <C-m> :NERDTreeFind<CR>
" nmap <silent> <leader><leader> :NERDTreeToggle<CR>
" let g:NERDTreeShowIgnoredStatus = 1

" FZF
set rtp+=/usr/local/opt/fzf
" command! -bang -nargs=* Ag
"   \ call fzf#vim#ag(
"   \   '',
"   \   <bang>0 ? fzf#vim#with_preview('up:60%')
"   \           : fzf#vim#with_preview('up:70%:hidden', '?'),
"   \   <bang>0)
" let g:fzf_layout = { 'window': 'enew' }

" Vim-javascript
" let g:javascript_plugin_jsdoc = 1

"Markdown
let vim_markdown_preview_github=1
let vim_markdown_preview_browser='Google Chrome'

"Local vimrc
let g:localvimrc_ask=0

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

nnoremap <Leader>w :w<CR>
nnoremap <Leader>o :GFiles .<CR>
nnoremap <leader>fc :Commits<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fa :Ag<CR>

" Open new split for C+hjkl, if split doesnt exist
map <silent> <C-h> :call WinMove('h')<CR>
map <silent> <C-j> :call WinMove('j')<CR>
map <silent> <C-k> :call WinMove('k')<CR>
map <silent> <C-l> :call WinMove('l')<CR>
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
    if (t:curwin == winnr())
      if (match(a:key,'[jk]'))
        wincmd v
      else
        wincmd s
      endif
   exec "wincmd ".a:key
  endif
endfunction

" emmet
let g:user_emmet_leader_key=','
let g:user_emmet_settings = {
\  'javascript' : {
\      'extends' : 'jsx',
\  },
\}

" Enable tsx hightlighting
augroup SyntaxSettings
    autocmd!
    autocmd BufNewFile,BufRead *.tsx set filetype=typescript
augroup END

" Testing
nmap <silent> <leader>t :TestNearest<CR>

" JavaScript shortcuts
" Console log from insert mode; Puts focus inside parentheses
imap cll console.log()<Esc><S-f>(a
" Console log from visual mode on next line, puts visual selection inside parentheses
vmap cll yocll<Esc>p
" Console log from normal mode, inserted on next line with word your on inside parentheses
nmap cll yiwocll<Esc>p

" Clojure
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
